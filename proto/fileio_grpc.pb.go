// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteFileSystemServiceClient is the client API for RemoteFileSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteFileSystemServiceClient interface {
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	ReadAt(ctx context.Context, in *ReadAtRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	WriteAt(ctx context.Context, in *WriteAtRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Seek(ctx context.Context, in *SeekRequest, opts ...grpc.CallOption) (*SeekResponse, error)
	Ftruncate(ctx context.Context, in *FtruncateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Fstat(ctx context.Context, in *FstatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Readdir(ctx context.Context, in *ReaddirRequest, opts ...grpc.CallOption) (*ReaddirResponse, error)
}

type remoteFileSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteFileSystemServiceClient(cc grpc.ClientConnInterface) RemoteFileSystemServiceClient {
	return &remoteFileSystemServiceClient{cc}
}

func (c *remoteFileSystemServiceClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) ReadAt(ctx context.Context, in *ReadAtRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/ReadAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) WriteAt(ctx context.Context, in *WriteAtRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/WriteAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Seek(ctx context.Context, in *SeekRequest, opts ...grpc.CallOption) (*SeekResponse, error) {
	out := new(SeekResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Seek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Ftruncate(ctx context.Context, in *FtruncateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Ftruncate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Truncate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Fstat(ctx context.Context, in *FstatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Fstat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Fsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Unlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Rmdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteFileSystemServiceClient) Readdir(ctx context.Context, in *ReaddirRequest, opts ...grpc.CallOption) (*ReaddirResponse, error) {
	out := new(ReaddirResponse)
	err := c.cc.Invoke(ctx, "/RemoteFileSystemService/Readdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteFileSystemServiceServer is the server API for RemoteFileSystemService service.
// All implementations must embed UnimplementedRemoteFileSystemServiceServer
// for forward compatibility
type RemoteFileSystemServiceServer interface {
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	KeepAlive(context.Context, *KeepAliveRequest) (*empty.Empty, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	ReadAt(context.Context, *ReadAtRequest) (*ReadResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	WriteAt(context.Context, *WriteAtRequest) (*WriteResponse, error)
	Seek(context.Context, *SeekRequest) (*SeekResponse, error)
	Ftruncate(context.Context, *FtruncateRequest) (*empty.Empty, error)
	Truncate(context.Context, *TruncateRequest) (*empty.Empty, error)
	Fstat(context.Context, *FstatRequest) (*StatResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	Fsync(context.Context, *FsyncRequest) (*empty.Empty, error)
	Close(context.Context, *CloseRequest) (*empty.Empty, error)
	Rename(context.Context, *RenameRequest) (*empty.Empty, error)
	Unlink(context.Context, *UnlinkRequest) (*empty.Empty, error)
	Mkdir(context.Context, *MkdirRequest) (*empty.Empty, error)
	Rmdir(context.Context, *RmdirRequest) (*empty.Empty, error)
	Readdir(context.Context, *ReaddirRequest) (*ReaddirResponse, error)
	mustEmbedUnimplementedRemoteFileSystemServiceServer()
}

// UnimplementedRemoteFileSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteFileSystemServiceServer struct {
}

func (UnimplementedRemoteFileSystemServiceServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) KeepAlive(context.Context, *KeepAliveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) ReadAt(context.Context, *ReadAtRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAt not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) WriteAt(context.Context, *WriteAtRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteAt not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Seek(context.Context, *SeekRequest) (*SeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seek not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Ftruncate(context.Context, *FtruncateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ftruncate not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Truncate(context.Context, *TruncateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Fstat(context.Context, *FstatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fstat not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Fsync(context.Context, *FsyncRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fsync not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Close(context.Context, *CloseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Rename(context.Context, *RenameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Unlink(context.Context, *UnlinkRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlink not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Mkdir(context.Context, *MkdirRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Rmdir(context.Context, *RmdirRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rmdir not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) Readdir(context.Context, *ReaddirRequest) (*ReaddirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readdir not implemented")
}
func (UnimplementedRemoteFileSystemServiceServer) mustEmbedUnimplementedRemoteFileSystemServiceServer() {
}

// UnsafeRemoteFileSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteFileSystemServiceServer will
// result in compilation errors.
type UnsafeRemoteFileSystemServiceServer interface {
	mustEmbedUnimplementedRemoteFileSystemServiceServer()
}

func RegisterRemoteFileSystemServiceServer(s grpc.ServiceRegistrar, srv RemoteFileSystemServiceServer) {
	s.RegisterService(&RemoteFileSystemService_ServiceDesc, srv)
}

func _RemoteFileSystemService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_ReadAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).ReadAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/ReadAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).ReadAt(ctx, req.(*ReadAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_WriteAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).WriteAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/WriteAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).WriteAt(ctx, req.(*WriteAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Seek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Seek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Seek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Seek(ctx, req.(*SeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Ftruncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FtruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Ftruncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Ftruncate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Ftruncate(ctx, req.(*FtruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Truncate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Truncate(ctx, req.(*TruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Fstat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FstatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Fstat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Fstat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Fstat(ctx, req.(*FstatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Fsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Fsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Fsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Fsync(ctx, req.(*FsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Unlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Unlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Unlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Unlink(ctx, req.(*UnlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Mkdir(ctx, req.(*MkdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Rmdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Rmdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Rmdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Rmdir(ctx, req.(*RmdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteFileSystemService_Readdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReaddirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteFileSystemServiceServer).Readdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteFileSystemService/Readdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteFileSystemServiceServer).Readdir(ctx, req.(*ReaddirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteFileSystemService_ServiceDesc is the grpc.ServiceDesc for RemoteFileSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteFileSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RemoteFileSystemService",
	HandlerType: (*RemoteFileSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _RemoteFileSystemService_Open_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _RemoteFileSystemService_KeepAlive_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _RemoteFileSystemService_Read_Handler,
		},
		{
			MethodName: "ReadAt",
			Handler:    _RemoteFileSystemService_ReadAt_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _RemoteFileSystemService_Write_Handler,
		},
		{
			MethodName: "WriteAt",
			Handler:    _RemoteFileSystemService_WriteAt_Handler,
		},
		{
			MethodName: "Seek",
			Handler:    _RemoteFileSystemService_Seek_Handler,
		},
		{
			MethodName: "Ftruncate",
			Handler:    _RemoteFileSystemService_Ftruncate_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _RemoteFileSystemService_Truncate_Handler,
		},
		{
			MethodName: "Fstat",
			Handler:    _RemoteFileSystemService_Fstat_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _RemoteFileSystemService_Stat_Handler,
		},
		{
			MethodName: "Fsync",
			Handler:    _RemoteFileSystemService_Fsync_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _RemoteFileSystemService_Close_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _RemoteFileSystemService_Rename_Handler,
		},
		{
			MethodName: "Unlink",
			Handler:    _RemoteFileSystemService_Unlink_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _RemoteFileSystemService_Mkdir_Handler,
		},
		{
			MethodName: "Rmdir",
			Handler:    _RemoteFileSystemService_Rmdir_Handler,
		},
		{
			MethodName: "Readdir",
			Handler:    _RemoteFileSystemService_Readdir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileio.proto",
}
